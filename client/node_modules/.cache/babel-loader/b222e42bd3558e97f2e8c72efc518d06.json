{"ast":null,"code":"import React from 'react';\n\nconst Helpers = () => {\n  const toggleInfo = event => {\n    event.preventDefault();\n    this.setState({\n      canvasInfo: !this.state.canvasInfo\n    });\n  };\n\n  const handleMapClick = event => {\n    let x = event.clientX;\n    let y = event.clientY;\n    console.log({\n      capturedClick: [x, y]\n    });\n    this.setState({\n      capturedClick: [x, y]\n    });\n  };\n\n  const calculateOffset = () => {\n    let element = document.getElementsByClassName(\"canvas-map\")[0];\n    let rect = element.getBoundingClientRect();\n    let currentSize = {\n      x: rect.width,\n      y: rect.height\n    };\n    this.setState({\n      browserSize: currentSize\n    });\n  };\n\n  const togglePinInput = (pinData = null) => {\n    let map = document.getElementById('root');\n    this.setState({\n      pinInput: !this.state.pinInput,\n      currentPin: pinData\n    });\n    !!this.state.pinInput ? map.style.cursor = \"default\" : map.style.cursor = \"crosshair\";\n  };\n\n  const toggleControls = event => {\n    event.preventDefault();\n    this.setState({\n      pinControls: !this.state.pinControls\n    });\n  };\n\n  const filterByColor = color => {\n    let data = {\n      type: 'SHOW_PINS_BY_COLOR',\n      criteria: color\n    };\n    this.props.setFilter(data);\n  };\n\n  const toggleColorFilter = event => {\n    event.preventDefault();\n\n    if (this.state.colorFilter) {\n      this.props.setFilter({\n        type: 'SHOW_ALL',\n        criteria: null\n      });\n    }\n\n    this.setState({\n      colorFilter: !this.state.colorFilter\n    });\n  };\n\n  const handleSubmit = (event, data) => {\n    event.preventDefault();\n    data.x = this.state.capturedClick[0];\n    data.y = this.state.capturedClick[1];\n    this.props.createPin(data, this.props.id);\n    this.togglePinInput(null);\n  };\n\n  const handleEdit = (event, data) => {\n    event.preventDefault();\n    data.x = this.state.capturedClick[0];\n    data.y = this.state.capturedClick[1];\n    this.props.editPin(data);\n    this.togglePinInput(null);\n  };\n\n  const deletePin = id => {\n    this.props.deletePin(this.props.id, id);\n  };\n};\n\nexport default Helpers;","map":{"version":3,"sources":["/Users/Mackenzie/worldpin/client/src/helpers/containerHelpers.js"],"names":["React","Helpers","toggleInfo","event","preventDefault","setState","canvasInfo","state","handleMapClick","x","clientX","y","clientY","console","log","capturedClick","calculateOffset","element","document","getElementsByClassName","rect","getBoundingClientRect","currentSize","width","height","browserSize","togglePinInput","pinData","map","getElementById","pinInput","currentPin","style","cursor","toggleControls","pinControls","filterByColor","color","data","type","criteria","props","setFilter","toggleColorFilter","colorFilter","handleSubmit","createPin","id","handleEdit","editPin","deletePin"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Helpers = () => {\n  const toggleInfo = (event) => {\n    event.preventDefault();\n    this.setState({canvasInfo: !this.state.canvasInfo})\n  }\n\n  const handleMapClick = (event) => {\n    let x = event.clientX;\n    let y = event.clientY;\n    console.log({capturedClick: [x, y]})\n    this.setState({ capturedClick: [x, y] })\n  }\n\n  const calculateOffset = () => {\n    let element = document.getElementsByClassName(\"canvas-map\")[0];\n    let rect = element.getBoundingClientRect();\n    let currentSize = {x: rect.width, y: rect.height};\n    this.setState({ browserSize: currentSize  })\n  }\n\n  const togglePinInput = (pinData = null) => {\n    let map = document.getElementById('root')\n    this.setState({pinInput: !this.state.pinInput, currentPin: pinData})\n    !!this.state.pinInput ? map.style.cursor=\"default\" : map.style.cursor=\"crosshair\";\n  }\n\n  const toggleControls = (event) => {\n    event.preventDefault();\n    this.setState({pinControls: !this.state.pinControls})\n  }\n\n  const filterByColor = (color) => {\n    let data = {type: 'SHOW_PINS_BY_COLOR', criteria: color}\n    this.props.setFilter(data);\n  }\n\n  const toggleColorFilter = (event) => {\n    event.preventDefault();\n    if (this.state.colorFilter) {this.props.setFilter({type: 'SHOW_ALL', criteria: null})}\n    this.setState({colorFilter: !this.state.colorFilter})\n  }\n\n  const handleSubmit = (event, data) => {\n    event.preventDefault()\n    data.x = this.state.capturedClick[0]\n    data.y = this.state.capturedClick[1]\n    this.props.createPin(data, this.props.id)\n    this.togglePinInput(null)\n  }\n\n  const handleEdit = (event, data) => {\n    event.preventDefault()\n    data.x = this.state.capturedClick[0]\n    data.y = this.state.capturedClick[1]\n    this.props.editPin(data)\n    this.togglePinInput(null)\n  }\n\n  const deletePin = (id) => {\n    this.props.deletePin(this.props.id, id)\n  }\n}\n\nexport default Helpers;\n"]},"metadata":{},"sourceType":"module"}
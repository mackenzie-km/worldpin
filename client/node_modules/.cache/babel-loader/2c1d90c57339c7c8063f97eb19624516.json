{"ast":null,"code":"var _jsxFileName = \"/Users/Mackenzie/worldpin/client/src/containers/PinContainer.js\";\nimport React, { PureComponent } from 'react';\nimport PinInput from '../components/pins/PinInput.js';\nimport PinControls from '../components/pins/PinControls.js';\nimport PinList from '../components/pins/PinList.js';\nimport ColorFilter from '../components/canvas/ColorFilter.js';\nimport CanvasTitle from '../components/canvas/CanvasTitle.js';\nimport CanvasMap from '../components/canvas/CanvasMap.js';\nimport CanvasInfo from '../components/canvas/CanvasInfo';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom'; // Handles all of the pin logic and display\n\nclass PinContainer extends PureComponent {\n  constructor(props) {\n    debugger;\n    super(props);\n\n    this.toggleInfo = event => {\n      event.preventDefault();\n      this.setState({\n        canvasInfo: !this.state.canvasInfo\n      });\n    };\n\n    this.handleMapClick = event => {\n      let x = event.clientX;\n      let y = event.clientY;\n      console.log({\n        capturedClick: [x, y]\n      });\n      this.setState({\n        capturedClick: [x, y]\n      });\n    };\n\n    this.calculateOffset = () => {\n      let element = document.getElementsByClassName(\"canvas-map\")[0];\n      let rect = element.getBoundingClientRect();\n      let currentSize = {\n        x: rect.width,\n        y: rect.height\n      };\n      this.setState({\n        browserSize: currentSize\n      });\n    };\n\n    this.togglePinInput = (pinData = null) => {\n      let map = document.getElementById('root');\n      this.setState({\n        pinInput: !this.state.pinInput,\n        currentPin: pinData\n      });\n      !!this.state.pinInput ? map.style.cursor = \"default\" : map.style.cursor = \"crosshair\";\n    };\n\n    this.toggleControls = event => {\n      event.preventDefault();\n      this.setState({\n        pinControls: !this.state.pinControls\n      });\n    };\n\n    this.filterByColor = color => {\n      let data = {\n        type: 'SHOW_PINS_BY_COLOR',\n        criteria: color\n      };\n      this.props.setFilter(data);\n    };\n\n    this.toggleColorFilter = event => {\n      event.preventDefault();\n\n      if (this.state.colorFilter) {\n        this.props.setFilter({\n          type: 'SHOW_ALL',\n          criteria: null\n        });\n      }\n\n      this.setState({\n        colorFilter: !this.state.colorFilter\n      });\n    };\n\n    this.handleSubmit = (event, data) => {\n      event.preventDefault();\n      data.x = this.props.capturedClick[0];\n      data.y = this.props.capturedClick[1];\n      this.props.createPin(data, this.props.id);\n      this.togglePinInput(null);\n    };\n\n    this.handleEdit = (event, data) => {\n      event.preventDefault();\n      data.x = this.props.capturedClick[0];\n      data.y = this.props.capturedClick[1];\n      this.props.editPin(data);\n      this.togglePinInput(null);\n    };\n\n    this.deletePin = id => {\n      this.props.deletePin(this.props.id, id);\n    };\n\n    this.state = {\n      canvasId: props.match,\n      pinInput: false,\n      pinControls: false,\n      colorFilter: false,\n      canvasInfo: false,\n      currentPin: {},\n      capturedClick: [],\n      browserSize: {\n        x: 1366,\n        y: 768\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchMapInfo(this.state.canvasId);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"canvas-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(CanvasTitle, {\n      title: \"ten characters\",\n      id: 11111,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(CanvasMap, {\n      url: null,\n      handleMapClick: this.handleMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"canvas-info\",\n      onClick: this.toggleInfo,\n      alt: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"info\")), !!this.state.canvasInfo ? React.createElement(CanvasInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }) : null, React.createElement(PinContainer, {\n      id: this.state.canvasId,\n      capturedClick: this.state.capturedClick,\n      browserSize: this.state.browserSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/maps/\".concat(this.props.id, \"/new\"),\n      render: routerProps => React.createElement(PinInput, Object.assign({}, routerProps, {\n        currentPin: this.state.currentPin,\n        handleSubmit: this.handleSubmit,\n        handleEdit: this.handleEdit,\n        hide: this.togglePinInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), !!this.state.pinControls ? React.createElement(PinControls, {\n      togglePinInput: this.togglePinInput,\n      toggleColorFilter: this.toggleColorFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : null, !!this.state.pinInput ? React.createElement(PinInput, {\n      currentPin: this.state.currentPin,\n      handleSubmit: this.handleSubmit,\n      handleEdit: this.handleEdit,\n      hide: this.togglePinInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }) : null, React.createElement(PinList, {\n      canvasId: this.props.id,\n      browserSize: this.props.browserSize,\n      togglePinInput: this.togglePinInput,\n      pins: this.props.pins,\n      delete: this.deletePin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), !!this.state.colorFilter ? React.createElement(ColorFilter, {\n      filterByColor: this.filterByColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }) : null, React.createElement(\"button\", {\n      id: \"pin-controls-toggle\",\n      onClick: this.toggleControls,\n      alt: \"more\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"settings\")));\n  }\n\n}\n\nconst getVisiblePins = (pins = [], data) => {\n  switch (data.type) {\n    case 'SHOW_ALL':\n      return pins;\n\n    case 'SHOW_PIN_BY_ID':\n      return pins.filter(x => x.id === data.criteria);\n\n    case 'SHOW_PINS_BY_COLOR':\n      return pins.filter(x => x.color === data.criteria);\n\n    default:\n      return pins;\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    pins: getVisiblePins(state.pinReducer.pins, state.filterReducer)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMapInfo: id => {\n      dispatch({\n        type: 'LOADING_MAP'\n      });\n      fetch(\"/maps/\".concat(id)).then(res => res.json()).then(json => dispatch({\n        type: 'LOAD_PINS',\n        json\n      }));\n    },\n    createPin: (data, id) => {\n      dispatch({\n        type: 'CREATING_PIN'\n      });\n      fetch(\"/maps/\".concat(id, \"/pins\"), {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(data => dispatch({\n        type: 'CREATE_PIN',\n        data\n      }));\n    },\n    deletePin: (map_id, id) => {\n      dispatch({\n        type: 'DELETING_PIN'\n      });\n      fetch(\"/maps/\".concat(map_id, \"/pins/\").concat(id), {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json()).then(data => dispatch({\n        type: 'DELETE_PIN',\n        data\n      }));\n    },\n    editPin: data => {\n      dispatch({\n        type: 'EDITING_PIN'\n      });\n      fetch(\"/pins/\".concat(data.id), {\n        method: 'PATCH',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(data => dispatch({\n        type: 'EDIT_PIN',\n        data\n      }));\n    },\n    setFilter: data => {\n      dispatch({\n        type: data.type,\n        criteria: data.criteria\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PinContainer);","map":{"version":3,"sources":["/Users/Mackenzie/worldpin/client/src/containers/PinContainer.js"],"names":["React","PureComponent","PinInput","PinControls","PinList","ColorFilter","CanvasTitle","CanvasMap","CanvasInfo","connect","Route","PinContainer","constructor","props","toggleInfo","event","preventDefault","setState","canvasInfo","state","handleMapClick","x","clientX","y","clientY","console","log","capturedClick","calculateOffset","element","document","getElementsByClassName","rect","getBoundingClientRect","currentSize","width","height","browserSize","togglePinInput","pinData","map","getElementById","pinInput","currentPin","style","cursor","toggleControls","pinControls","filterByColor","color","data","type","criteria","setFilter","toggleColorFilter","colorFilter","handleSubmit","createPin","id","handleEdit","editPin","deletePin","canvasId","match","componentDidMount","fetchMapInfo","render","routerProps","pins","getVisiblePins","filter","mapStateToProps","pinReducer","filterReducer","mapDispatchToProps","dispatch","fetch","then","res","json","method","headers","body","JSON","stringify","map_id"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PinInput from '../components/pins/PinInput.js';\nimport PinControls from '../components/pins/PinControls.js';\nimport PinList from '../components/pins/PinList.js';\nimport ColorFilter from '../components/canvas/ColorFilter.js';\nimport CanvasTitle from '../components/canvas/CanvasTitle.js';\nimport CanvasMap from '../components/canvas/CanvasMap.js';\nimport CanvasInfo from '../components/canvas/CanvasInfo';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\n\n// Handles all of the pin logic and display\n\nclass PinContainer extends PureComponent {\n\nconstructor(props){\n  debugger\n  super(props)\n  this.state = {\n    canvasId: props.match,\n    pinInput: false,\n    pinControls: false,\n    colorFilter: false,\n    canvasInfo: false,\n    currentPin: {},\n    capturedClick: [],\n    browserSize: {x: 1366, y: 768}\n  }\n}\n\ncomponentDidMount() {\n  this.props.fetchMapInfo(this.state.canvasId)\n}\n\n\n  toggleInfo = (event) => {\n    event.preventDefault();\n    this.setState({canvasInfo: !this.state.canvasInfo})\n  }\n\n  handleMapClick = (event) => {\n    let x = event.clientX;\n    let y = event.clientY;\n    console.log({capturedClick: [x, y]})\n    this.setState({ capturedClick: [x, y] })\n  }\n\n  calculateOffset = () => {\n    let element = document.getElementsByClassName(\"canvas-map\")[0];\n    let rect = element.getBoundingClientRect();\n    let currentSize = {x: rect.width, y: rect.height};\n    this.setState({ browserSize: currentSize  })\n  }\n\ntogglePinInput = (pinData = null) => {\n  let map = document.getElementById('root')\n  this.setState({pinInput: !this.state.pinInput, currentPin: pinData})\n  !!this.state.pinInput ? map.style.cursor=\"default\" : map.style.cursor=\"crosshair\";\n}\n\ntoggleControls = (event) => {\n  event.preventDefault();\n  this.setState({pinControls: !this.state.pinControls})\n}\n\nfilterByColor = (color) => {\n  let data = {type: 'SHOW_PINS_BY_COLOR', criteria: color}\n  this.props.setFilter(data);\n}\n\ntoggleColorFilter = (event) => {\n  event.preventDefault();\n  if (this.state.colorFilter) {this.props.setFilter({type: 'SHOW_ALL', criteria: null})}\n  this.setState({colorFilter: !this.state.colorFilter})\n}\n\nhandleSubmit = (event, data) => {\n  event.preventDefault()\n  data.x = this.props.capturedClick[0]\n  data.y = this.props.capturedClick[1]\n  this.props.createPin(data, this.props.id)\n  this.togglePinInput(null)\n}\n\nhandleEdit = (event, data) => {\n  event.preventDefault()\n  data.x = this.props.capturedClick[0]\n  data.y = this.props.capturedClick[1]\n  this.props.editPin(data)\n  this.togglePinInput(null)\n}\n\ndeletePin = (id) => {\n  this.props.deletePin(this.props.id, id)\n}\n\n  render() {\n    return (\n      <div className=\"canvas-container\">\n      <CanvasTitle title={\"ten characters\"} id={11111} />\n      <CanvasMap url={null} handleMapClick={this.handleMapClick} />\n      <button id=\"canvas-info\" onClick={this.toggleInfo} alt=\"info\"><i className=\"material-icons\">info</i></button>\n      {!!this.state.canvasInfo ? <CanvasInfo /> : null }\n      <PinContainer id={this.state.canvasId} capturedClick={this.state.capturedClick} browserSize={this.state.browserSize} />\n        <Route path={`/maps/${this.props.id}/new`} render={routerProps => <PinInput {...routerProps} currentPin={this.state.currentPin}\n          handleSubmit={this.handleSubmit}\n          handleEdit={this.handleEdit}\n          hide={this.togglePinInput} /> }/>\n          {!!this.state.pinControls\n            ? <PinControls\n              togglePinInput={this.togglePinInput}\n              toggleColorFilter={this.toggleColorFilter} />\n            : null }\n          {!!this.state.pinInput\n            ? <PinInput\n              currentPin={this.state.currentPin}\n                handleSubmit={this.handleSubmit}\n                handleEdit={this.handleEdit}\n                hide={this.togglePinInput} />\n            : null}\n          {<PinList\n            canvasId={this.props.id}\n            browserSize={this.props.browserSize}\n            togglePinInput={this.togglePinInput}\n            pins={this.props.pins}\n            delete={this.deletePin} />}\n          {!!this.state.colorFilter\n            ? <ColorFilter filterByColor={this.filterByColor} />\n            : null}\n          <button id=\"pin-controls-toggle\"\n            onClick={this.toggleControls}\n            alt=\"more\">\n            <i className=\"material-icons\">settings</i>\n          </button>\n      </div>\n    )\n  }\n}\n\nconst getVisiblePins = (pins = [], data) => {\n  switch (data.type) {\n    case 'SHOW_ALL':\n      return pins;\n    case 'SHOW_PIN_BY_ID':\n      return pins.filter(x => x.id === data.criteria);\n    case 'SHOW_PINS_BY_COLOR':\n      return pins.filter(x => x.color === data.criteria);\n    default:\n      return pins\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { pins: getVisiblePins(state.pinReducer.pins, state.filterReducer) }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchMapInfo: (id) => {\n      dispatch ({type: 'LOADING_MAP'});\n      fetch(`/maps/${id}`)\n      .then(res => res.json())\n      .then(json => dispatch({type: 'LOAD_PINS', json}))\n    },\n    createPin: (data, id) => {\n      dispatch ({type: 'CREATING_PIN'});\n      fetch(`/maps/${id}/pins`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n      .then(res => res.json())\n      .then(data => dispatch({type: 'CREATE_PIN', data}));\n    },\n    deletePin: (map_id, id) => {\n      dispatch ({type: 'DELETING_PIN'});\n      fetch(`/maps/${map_id}/pins/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n          }\n        })\n      .then(res => res.json())\n      .then(data => dispatch({type: 'DELETE_PIN', data}));\n    },\n    editPin: (data) => {\n      dispatch ({type: 'EDITING_PIN'});\n      fetch(`/pins/${data.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n    .then(res => res.json())\n    .then(data => dispatch({type: 'EDIT_PIN', data}))\n  },\n    setFilter: (data) => {dispatch({type: data.type, criteria: data.criteria})}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PinContainer);\n"]},"metadata":{},"sourceType":"module"}
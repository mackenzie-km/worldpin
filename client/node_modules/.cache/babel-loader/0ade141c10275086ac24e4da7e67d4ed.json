{"ast":null,"code":"var _jsxFileName = \"/Users/Mackenzie/worldpin/src/containers/PinContainer.js\";\nimport React, { PureComponent } from 'react';\nimport PinInput from '../components/pins/PinInput.js';\nimport PinControls from '../components/pins/PinControls.js';\nimport PinList from '../components/pins/PinList.js';\nimport { connect } from 'react-redux'; // Handles all of the pin logic and display\n\nclass PinContainer extends PureComponent {\n  constructor() {\n    super();\n\n    this.togglePinInput = event => {\n      let map = document.getElementById('root');\n      this.setState({\n        pinInput: !this.state.pinInput\n      });\n      this.state.pinControls ? map.style.cursor = \"crosshair\" : map.style.cursor = \"default\";\n    };\n\n    this.toggleControls = event => {\n      event.preventDefault();\n      this.setState({\n        pinControls: !this.state.pinControls\n      });\n    };\n\n    this.addButton = () => {\n      this.togglePinInput();\n    };\n\n    this.editButton = () => {\n      console.log(\"edit\");\n    };\n\n    this.deleteButton = () => {\n      console.log(\"delete\");\n    };\n\n    this.viewButton = () => {\n      console.log(\"view\");\n    };\n\n    this.handleSubmit = (event, data) => {\n      event.preventDefault();\n      data.location = this.props.capturedClick;\n      this.props.createPin(data);\n      this.togglePinInput();\n    };\n\n    this.state = {\n      pinInput: false,\n      pinControls: false\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, !!this.state.pinControls ? React.createElement(PinControls, {\n      addButton: this.addButton,\n      editButton: this.editButton,\n      deleteButton: this.deleteButton,\n      viewButton: this.viewButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }) : null, !!this.state.pinInput ? React.createElement(PinInput, {\n      id: null,\n      handleSubmit: this.handleSubmit,\n      hide: this.togglePinInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }) : null, React.createElement(PinList, {\n      offset: this.props.offset,\n      pins: this.props.pins,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"pin-controls-toggle\",\n      onClick: this.toggleControls,\n      alt: \"more\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"settings\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pins: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createPin: data => {\n      dispatch({\n        type: 'CREATE_PIN',\n        data\n      });\n    },\n    deletePin: () => {\n      dispatch();\n    },\n    editPin: () => {\n      dispatch();\n    },\n    filterPins: () => {\n      dispatch();\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PinContainer);","map":{"version":3,"sources":["/Users/Mackenzie/worldpin/src/containers/PinContainer.js"],"names":["React","PureComponent","PinInput","PinControls","PinList","connect","PinContainer","constructor","togglePinInput","event","map","document","getElementById","setState","pinInput","state","pinControls","style","cursor","toggleControls","preventDefault","addButton","editButton","console","log","deleteButton","viewButton","handleSubmit","data","location","props","capturedClick","createPin","render","offset","pins","mapStateToProps","mapDispatchToProps","dispatch","type","deletePin","editPin","filterPins"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PinInput from '../components/pins/PinInput.js';\nimport PinControls from '../components/pins/PinControls.js';\nimport PinList from '../components/pins/PinList.js';\nimport { connect } from 'react-redux';\n\n// Handles all of the pin logic and display\n\nclass PinContainer extends PureComponent {\n\nconstructor(){\n  super()\n  this.state = {\n    pinInput: false,\n    pinControls: false\n  }\n}\n\ntogglePinInput = (event) => {\n  let map = document.getElementById('root')\n  this.setState({pinInput: !this.state.pinInput})\n  this.state.pinControls ? map.style.cursor=\"crosshair\" : map.style.cursor=\"default\";\n}\n\ntoggleControls = (event) => {\n  event.preventDefault();\n  this.setState({pinControls: !this.state.pinControls})\n}\n\naddButton = () => {\n  this.togglePinInput()\n}\n\neditButton = () => {\n  console.log(\"edit\")\n}\n\ndeleteButton = () => {\n  console.log(\"delete\")\n}\n\nviewButton = () => {\n  console.log(\"view\")\n}\n\nhandleSubmit = (event, data) => {\n  event.preventDefault()\n  data.location = this.props.capturedClick\n  this.props.createPin(data)\n  this.togglePinInput()\n}\n\n  render() {\n    return (\n      <React.Fragment>\n          {!!this.state.pinControls ? <PinControls addButton={this.addButton} editButton={this.editButton} deleteButton={this.deleteButton} viewButton={this.viewButton} /> : null }\n          {!!this.state.pinInput ? <PinInput id={null} handleSubmit={this.handleSubmit} hide={this.togglePinInput} /> : null}\n          <PinList offset={this.props.offset} pins={this.props.pins} />\n          <button id=\"pin-controls-toggle\" onClick={this.toggleControls} alt=\"more\"><i className=\"material-icons\">settings</i></button>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { pins: state }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createPin: (data) => {dispatch({type: 'CREATE_PIN', data})},\n    deletePin: () => {dispatch()},\n    editPin: () => {dispatch()},\n    filterPins: () => {dispatch()}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PinContainer);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nexport default function toggleInfo(event) {\n  event.preventDefault();\n  this.setState({\n    canvasInfo: !this.state.canvasInfo\n  });\n}\nexport const handleMapClick = event => {\n  let x = event.clientX;\n  let y = event.clientY;\n  console.log({\n    capturedClick: [x, y]\n  });\n  this.setState({\n    capturedClick: [x, y]\n  });\n};\nexport const calculateOffset = () => {\n  let element = document.getElementsByClassName(\"canvas-map\")[0];\n  let rect = element.getBoundingClientRect();\n  let currentSize = {\n    x: rect.width,\n    y: rect.height\n  };\n  this.setState({\n    browserSize: currentSize\n  });\n};\nexport const togglePinInput = (pinData = null) => {\n  let map = document.getElementById('root');\n  this.setState({\n    pinInput: !this.state.pinInput,\n    currentPin: pinData\n  });\n  !!this.state.pinInput ? map.style.cursor = \"default\" : map.style.cursor = \"crosshair\";\n};\nexport const toggleControls = event => {\n  event.preventDefault();\n  this.setState({\n    pinControls: !this.state.pinControls\n  });\n};\nexport const filterByColor = color => {\n  let data = {\n    type: 'SHOW_PINS_BY_COLOR',\n    criteria: color\n  };\n  this.props.setFilter(data);\n};\nexport const toggleColorFilter = event => {\n  event.preventDefault();\n\n  if (this.state.colorFilter) {\n    this.props.setFilter({\n      type: 'SHOW_ALL',\n      criteria: null\n    });\n  }\n\n  this.setState({\n    colorFilter: !this.state.colorFilter\n  });\n};\nexport const handleSubmit = (event, data) => {\n  event.preventDefault();\n  data.x = this.state.capturedClick[0];\n  data.y = this.state.capturedClick[1];\n  this.props.createPin(data, this.props.id);\n  this.togglePinInput(null);\n};\nexport const handleEdit = (event, data) => {\n  event.preventDefault();\n  data.x = this.state.capturedClick[0];\n  data.y = this.state.capturedClick[1];\n  this.props.editPin(data);\n  this.togglePinInput(null);\n};\nexport const deletePin = id => {\n  this.props.deletePin(this.props.id, id);\n};","map":{"version":3,"sources":["/Users/Mackenzie/worldpin/client/src/helpers/containerHelpers.js"],"names":["React","toggleInfo","event","preventDefault","setState","canvasInfo","state","handleMapClick","x","clientX","y","clientY","console","log","capturedClick","calculateOffset","element","document","getElementsByClassName","rect","getBoundingClientRect","currentSize","width","height","browserSize","togglePinInput","pinData","map","getElementById","pinInput","currentPin","style","cursor","toggleControls","pinControls","filterByColor","color","data","type","criteria","props","setFilter","toggleColorFilter","colorFilter","handleSubmit","createPin","id","handleEdit","editPin","deletePin"],"mappings":"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","sourcesContent":["import React from 'react';\n\n  export default function toggleInfo (event) {\n    event.preventDefault();\n    this.setState({canvasInfo: !this.state.canvasInfo})\n  }\n\n  export const handleMapClick = (event) => {\n    let x = event.clientX;\n    let y = event.clientY;\n    console.log({capturedClick: [x, y]})\n    this.setState({ capturedClick: [x, y] })\n  }\n\n  export const calculateOffset = () => {\n    let element = document.getElementsByClassName(\"canvas-map\")[0];\n    let rect = element.getBoundingClientRect();\n    let currentSize = {x: rect.width, y: rect.height};\n    this.setState({ browserSize: currentSize  })\n  }\n\n  export const togglePinInput = (pinData = null) => {\n    let map = document.getElementById('root')\n    this.setState({pinInput: !this.state.pinInput, currentPin: pinData})\n    !!this.state.pinInput ? map.style.cursor=\"default\" : map.style.cursor=\"crosshair\";\n  }\n\n  export const toggleControls = (event) => {\n    event.preventDefault();\n    this.setState({pinControls: !this.state.pinControls})\n  }\n\n  export const filterByColor = (color) => {\n    let data = {type: 'SHOW_PINS_BY_COLOR', criteria: color}\n    this.props.setFilter(data);\n  }\n\n  export const toggleColorFilter = (event) => {\n    event.preventDefault();\n    if (this.state.colorFilter) {this.props.setFilter({type: 'SHOW_ALL', criteria: null})}\n    this.setState({colorFilter: !this.state.colorFilter})\n  }\n\n  export const handleSubmit = (event, data) => {\n    event.preventDefault()\n    data.x = this.state.capturedClick[0]\n    data.y = this.state.capturedClick[1]\n    this.props.createPin(data, this.props.id)\n    this.togglePinInput(null)\n  }\n\n  export const handleEdit = (event, data) => {\n    event.preventDefault()\n    data.x = this.state.capturedClick[0]\n    data.y = this.state.capturedClick[1]\n    this.props.editPin(data)\n    this.togglePinInput(null)\n  }\n\n  export const deletePin = (id) => {\n    this.props.deletePin(this.props.id, id)\n  }\n"]},"metadata":{},"sourceType":"module"}
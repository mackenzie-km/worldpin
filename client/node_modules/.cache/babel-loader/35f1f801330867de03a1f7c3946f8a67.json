{"ast":null,"code":"var _jsxFileName = \"/Users/Mackenzie/worldpin/client/src/containers/CanvasContainer.js\";\nimport React, { PureComponent } from 'react';\nimport CanvasTitle from '../components/canvas/CanvasTitle.js';\nimport CanvasMap from '../components/canvas/CanvasMap.js';\nimport CanvasInfo from '../components/canvas/CanvasInfo';\nimport { connect } from 'react-redux';\nimport PinContainer from './PinContainer'; // All of our canvas components (title, map, info, input) & pin container called & manipulated here\n\nclass CanvasContainer extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.toggleInfo = event => {\n      event.preventDefault();\n      this.setState({\n        canvasInfo: !this.state.canvasInfo\n      });\n    };\n\n    this.handleMapClick = event => {\n      let x = event.clientX;\n      let y = event.clientY;\n      console.log({\n        capturedClick: [x, y]\n      });\n      this.setState({\n        capturedClick: [x, y]\n      });\n    };\n\n    this.calculateOffset = () => {\n      let element = document.getElementsByClassName(\"canvas-map\")[0];\n      let rect = element.getBoundingClientRect();\n      let currentSize = {\n        x: rect.width,\n        y: rect.height\n      };\n      this.setState({\n        browserSize: currentSize\n      });\n    };\n\n    this.state = {\n      canvasId: props.id,\n      canvasInfo: false,\n      capturedClick: [],\n      browserSize: {\n        x: 1366,\n        y: 768\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchMapInfo(this.state.canvasId);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"canvas-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(CanvasTitle, {\n      title: \"ten characters\",\n      id: 11111,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(CanvasMap, {\n      url: null,\n      handleMapClick: this.handleMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"canvas-info\",\n      onClick: this.toggleInfo,\n      alt: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"info\")), !!this.state.canvasInfo ? React.createElement(CanvasInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }) : null, React.createElement(PinContainer, {\n      id: this.state.canvasId,\n      capturedClick: this.state.capturedClick,\n      browserSize: this.state.browserSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst getVisiblePins = (pins, data) => {\n  switch (data.type) {\n    case 'SHOW_ALL':\n      return pins;\n\n    case 'SHOW_PIN_BY_ID':\n      return pins.filter(x => x.id === data.criteria);\n\n    case 'SHOW_PINS_BY_COLOR':\n      return pins.filter(x => x.color === data.criteria);\n\n    default:\n      return pins;\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    pins: getVisiblePins(state.pinReducer.pins, state.filterReducer)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMapInfo: id => {\n      dispatch({\n        type: 'LOADING_MAP'\n      });\n      fetch(\"/maps/\".concat(id)).then(res => res.json()).then(json => dispatch({\n        type: 'LOAD_PINS',\n        json\n      }));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(CanvasContainer);","map":{"version":3,"sources":["/Users/Mackenzie/worldpin/client/src/containers/CanvasContainer.js"],"names":["React","PureComponent","CanvasTitle","CanvasMap","CanvasInfo","connect","PinContainer","CanvasContainer","constructor","props","toggleInfo","event","preventDefault","setState","canvasInfo","state","handleMapClick","x","clientX","y","clientY","console","log","capturedClick","calculateOffset","element","document","getElementsByClassName","rect","getBoundingClientRect","currentSize","width","height","browserSize","canvasId","id","componentDidMount","fetchMapInfo","render","getVisiblePins","pins","data","type","filter","criteria","color","mapStateToProps","pinReducer","filterReducer","mapDispatchToProps","dispatch","fetch","then","res","json"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport CanvasTitle from '../components/canvas/CanvasTitle.js';\nimport CanvasMap from '../components/canvas/CanvasMap.js';\nimport CanvasInfo from '../components/canvas/CanvasInfo';\nimport { connect } from 'react-redux'\nimport PinContainer from './PinContainer';\n\n// All of our canvas components (title, map, info, input) & pin container called & manipulated here\nclass CanvasContainer extends PureComponent {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      canvasId: props.id,\n      canvasInfo: false,\n      capturedClick: [],\n      browserSize: {x: 1366, y: 768}\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchMapInfo(this.state.canvasId)\n  }\n\n  toggleInfo = (event) => {\n    event.preventDefault();\n    this.setState({canvasInfo: !this.state.canvasInfo})\n  }\n\n  handleMapClick = (event) => {\n    let x = event.clientX;\n    let y = event.clientY;\n    console.log({capturedClick: [x, y]})\n    this.setState({ capturedClick: [x, y] })\n  }\n\n  calculateOffset = () => {\n    let element = document.getElementsByClassName(\"canvas-map\")[0];\n    let rect = element.getBoundingClientRect();\n    let currentSize = {x: rect.width, y: rect.height};\n    this.setState({ browserSize: currentSize  })\n  }\n\n  render() {\n    return (\n      <div className=\"canvas-container\">\n          <CanvasTitle title={\"ten characters\"} id={11111} />\n          <CanvasMap url={null} handleMapClick={this.handleMapClick} />\n          <button id=\"canvas-info\" onClick={this.toggleInfo} alt=\"info\"><i className=\"material-icons\">info</i></button>\n          {!!this.state.canvasInfo ? <CanvasInfo /> : null }\n          <PinContainer id={this.state.canvasId} capturedClick={this.state.capturedClick} browserSize={this.state.browserSize} />\n      </div>\n    )\n  }\n}\n\n\nconst getVisiblePins = (pins, data) => {\n  switch (data.type) {\n    case 'SHOW_ALL':\n      return pins;\n    case 'SHOW_PIN_BY_ID':\n      return pins.filter(x => x.id === data.criteria);\n    case 'SHOW_PINS_BY_COLOR':\n      return pins.filter(x => x.color === data.criteria);\n    default:\n      return pins\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { pins: getVisiblePins(state.pinReducer.pins, state.filterReducer) }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchMapInfo: (id) => {\n      dispatch ({type: 'LOADING_MAP'});\n      fetch(`/maps/${id}`)\n      .then(res => res.json())\n      .then(json => dispatch({type: 'LOAD_PINS', json}))\n    }\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(CanvasContainer);\n"]},"metadata":{},"sourceType":"module"}